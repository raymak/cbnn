%parameters
opts.trainSetSize = 20000;
opts.testSetSize = 10000;

opts.debug = 0;
opts.patch_size = 28;
opts.visibleSize = opts.patch_size ^ 2;   % number of input units 
opts.sparsityParam = 0.01;   % desired average activation of the hidden units.
opts.lambda = 3e-6;     % weight decay parameter       
opts.beta = 0;            % weight of sparsity penalty term       
opts.hiddenLayers = 1;  % number of hidden layers 
opts.hiddenSize = zeros(opts.hiddenLayers,1);
for i = 1:opts.hiddenLayers
	opts.hiddenSize(i) = 800;     % number of hidden units 
end
opts.neuronsPerBlock  = 2;
opts.outputSize = 5; % number of output units
opts.maxiter = 400;  %number of L-BFGS iterations

%file save, load options
opts.savefile = 1; %whether to save the final set of weight parameters
opts.savefname = 'weights_P1'; %save filename

opts.randomInitialize = 1; % whether to randomly initialize the weights or use previous weights
                           % as starting point for training if 0, specify filename of stored weights 
                           % in opts.loadfname
                           


%load train data
[train_data, train_labels] = loadData(opts.patch_size,opts.trainSetSize,0);

%train the network on the entire network
% theta = train(train_data,train_labels,opts);

%train the network on only part of the data - training only for digits
%less than 5
[ma index] = max(train_labels,[],1);
train_labels_part = train_labels(1:5,index <= 5);
train_data_part = train_data(:,index <= 5);
theta = train(train_data_part,train_labels_part,opts);

display('P1 Results');

%test the network on P1
train_data_prediction = predict(theta,train_data_part,opts);
test_data_prediction = predict(theta,test_data_part,opts);

%calculate accuracy
[m index_trp] = max(train_data_prediction);
[m index_tep] = max(test_data_prediction);
[m index_trl] = max(train_labels_part);
[m index_tel] = max(test_labels_part);

in_sample_accuracy =  (sum(index_trp == index_trl) / size(train_data_prediction,2)) * 100
out_sample_accuracy = (sum(index_tep == index_tel) / size(test_data_prediction,2)) * 100
%-------------------------------------------------------------------------------------------

%train the network on the rest of the data
opts.randomInitialize = 1;
opts.savefname = 'weights_P2';
train_labels_part = train_labels(6:10,index > 5);
train_data_part = train_data(:,index > 5);
theta = train(train_data_part,train_labels_part,opts);

%combine weights
load('weights_P1');
theta1 = opttheta;

%reshape weight parameters 
hiddenSize = opts.hiddenSize;
visibleSize = opts.visibleSize;
outputSize = opts.outputSize;
hiddenLayers = opts.hiddenLayers;
index = 1;
W = {};
mat_size = hiddenSize(1) * visibleSize;
W{1} = reshape(theta(index:index + mat_size - 1), hiddenSize(1), visibleSize);    
index = index + mat_size;
for i = 2:hiddenLayers     
    mat_size = hiddenSize(i) * hiddenSize(i-1); 
    W{i} = reshape(theta(index:index + mat_size - 1), hiddenSize(i), hiddenSize(i-1));    
    index = index + mat_size;
end
mat_size = hiddenSize(hiddenLayers) * outputSize;
W{hiddenLayers + 1} = reshape(theta1(index:index + mat_size - 1), outputSize, hiddenSize(hiddenLayers));    
index = index + mat_size;
%get bias vectors
b = {};
for i = 1:hiddenLayers
    b{i} = theta(index:index + hiddenSize(i)-1);
    index = index + hiddenSize(i);
end
b{hiddenLayers + 1} = theta1(index:end);

%mixed theta
theta = [];
%vectorizing weight matrices
for i = 1:hiddenLayers + 1
    theta = [theta ; W{i}(:)];
end
%vectorizing bias vectors
for i = 1:hiddenLayers + 1
    theta = [theta ; b{i}(:)];
end

%load test data
[test_data, test_labels] = loadData(opts.patch_size,opts.testSetSize,1);

%SAMPLE p1 SET
[ma index] = max(train_labels,[],1);
train_labels_part = train_labels(1:5,index <= 5);
train_data_part = train_data(:,index <= 5);
[ma index] = max(test_labels,[],1);
test_labels_part = test_labels(1:5,index <= 5);
test_data_part = test_data(:,index <= 5);

%test the network on P1
train_data_prediction = predict(theta,train_data_part,opts);
test_data_prediction = predict(theta,test_data_part,opts);

%calculate accuracy
[m index_trp] = max(train_data_prediction);
[m index_tep] = max(test_data_prediction);
[m index_trl] = max(train_labels_part);
[m index_tel] = max(test_labels_part);

in_sample_accuracy =  (sum(index_trp == index_trl) / size(train_data_prediction,2)) * 100
out_sample_accuracy = (sum(index_tep == index_tel) / size(test_data_prediction,2)) * 100
